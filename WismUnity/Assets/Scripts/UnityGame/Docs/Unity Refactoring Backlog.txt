[UNITY REFACTORING]

The quality of the Unity UI is at the Alpha-level. Given my newness to the platform there are
several examples of things that were done with cut-corners, hacks, or other "unofficial" solutions.
This captures a list of some of these known areas that are worth revisiting.

1. Canvas - Screen Overlay
Given how small these assets are (designed for old resolutions), the touch-targets and UI widgets
must be scaled down extremely small relative to their native size. This has exposed Unity bugs
and other issues such as font size limitations, which needs to be addressed.

Create a new Screen-Overlay canvas and port the UI elements for each panel. Any new panels should 
also be created first in this new Canvas which can co-exist with the legacy canvas until the 
refactoring work is completed. This will allow the elements to exist in a normal size for Unity
and the eliminate click-target and similar issues.

STATUS: In progress


2. Sprite sheets
Sprites are currently all pre-cut, simple images rather than using sprite sheets. This mean higher
memory and resource usage and potentially degraded performance. Unclear how significant this problem
is, but it will be an issue on larger maps and less capable devices.

Adopt sprite sheets and port all assets to using these.


3. Scaling and resolution support

Many script and UI elements rely on fixed, known sizes. This means it is impossible to choose
an alternate resolution without significant rework. 

Proper use of anchor points, borders in sliced sprites, unparenting, and screen-based script 
calculations will allow for dynamic scaling.

4. Performance

General use of "HardFind", cache optimization, Update/FixedUpdate, etc. will all contribute to 
a more efficient and less resource-intensive solution.